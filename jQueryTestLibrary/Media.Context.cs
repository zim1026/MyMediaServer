//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ALBUM> ALBUMS { get; set; }
        public virtual DbSet<ARTIST> ARTISTS { get; set; }
        public virtual DbSet<SONG> SONGS { get; set; }
        public virtual DbSet<USER_PLAYLIST> USER_PLAYLISTS { get; set; }
        public virtual DbSet<USER_SECURITY> USER_SECURITYS { get; set; }
        public virtual DbSet<V_SONG_LIST> V_SONG_LISTS { get; set; }
    
        public virtual ObjectResult<p_get_search_summary_Result> p_get_search_summary(string artistName, string albumName, string songTitle, string genre, Nullable<System.DateTime> dateAdded)
        {
            var artistNameParameter = artistName != null ?
                new ObjectParameter("ArtistName", artistName) :
                new ObjectParameter("ArtistName", typeof(string));
    
            var albumNameParameter = albumName != null ?
                new ObjectParameter("AlbumName", albumName) :
                new ObjectParameter("AlbumName", typeof(string));
    
            var songTitleParameter = songTitle != null ?
                new ObjectParameter("SongTitle", songTitle) :
                new ObjectParameter("SongTitle", typeof(string));
    
            var genreParameter = genre != null ?
                new ObjectParameter("Genre", genre) :
                new ObjectParameter("Genre", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<p_get_search_summary_Result>("p_get_search_summary", artistNameParameter, albumNameParameter, songTitleParameter, genreParameter, dateAddedParameter);
        }
    }
}
